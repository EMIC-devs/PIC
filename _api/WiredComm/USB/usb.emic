/*****************************************************************************

  @file     usb.emic

  @brief    USB interface

  @author   Tomas Pentacolo (based on Pablo Llull (PL))

  @date     23/11/2022

  @version  v0.0.1 - Initial release.

 ******************************************************************************/
//RFI TAG:driverName=USB

/*RFI JSon
{
	'Nombre': 'USBprot',
	'Tipo' : 'Configurator',
	'subtype' : 'str',
	'title': 'Power on Dynamometer',
	"InnerHTML":"
	<fieldset>
		<legend>Select USB Protocol:</legend>
		<div title='Send and receive EMIC messages'><input type='radio' required name='USBprot' id='USBprot_1' value='`EMIC_message`' checked ><label for='USBprot_1'>EMIC message</label></input></div>
		<div title='Send and receive lines of text that end with a special character'><input type='radio' required name='USBprot' id='USBprot_2' value='`TEXT_line`'><label for='USBprot_2'>TEXT line</label></input></div>
		<div style='opacity: 0.4;' title='(not implemented)'><input style='pointer-events: none;' type='radio' required name='USBprot' id='USBprot_3' value='`STREAM`'><label for='USBprot_3'>Binary</label></input></div>
	</fieldset>
	"
}
*/

EMIC:if(.{config.USBprot}.=="TEXT_line")
/*RFI JSon
{
	'Nombre': 'USB end line',
	'Tipo' : 'ConfigDynamic',
	'title': 'set uart end line',
	"InnerHTML":"
	<fieldset>
		<legend>USB rcv. end line:</legend>
		<input type='text' required name='USBFrameLf' value='0x0A'>
	</fieldset>
	"
}
*/
EMIC:endif

EMIC:if(.{config.USBprot}.=="EMIC_message")
/*xRFI JSon
{
	'Nombre': 'pUSB',
	'NombreToolBox': 'Send',
	'Tipo' : 'SistemFnc',
	'title': 'Send a EMIC message through the USB port',
	'returnInfo': {'type':'','tooltip':'Nothing'},
	'parameters': [{'name': 'Tag',
					'tooltip': 'Tag to identify the message',
					'required': 'true"',
					'type': 'str'},
					{'name': 'Msg',
					'tooltip': 'String to send',
					'required': 'true',
					'type': 'str'}],
	'InnerHTML':"
		<div type='printf' class='lineaDeCodigo' originalclass='funcion' originalid='pUSB' draggable='true' ondragstart='drag_linea(event)'>
			USB.send(<div type='concat' title='Tag to identify the message' class='parametroDiv'></div><div class='hideParam' type='text' value='h'></div>,<div type='concat' title='String to send' class='parametroDiv'></div>)
		</div>"
}
*/

/**
* @fn printf pUSB(concat tag,concat msg);
* @alias Send
* @brief Send a EMIC message through the USB port
* @return Nothing
* @param tag Etiqueta que identifica el mensaje
* @param msg Contenido del mensaje
*/


EMIC:else
/*RFI JSon
{
	'Nombre': 'pUSB',
	'NombreToolBox': 'Send',
	'Tipo' : 'SistemFnc',
	'title': 'Send a TEXT Line through the USB port',
	'returnInfo': {'type':'','tooltip':'Nothing'},
	'parameters': [
					{'name': 'Msg',
					'tooltip': 'String to send',
					'required': 'true',
					'type': 'str'}],
	'InnerHTML':"
		<div class='lineaDeCodigo' originalclass='funcion' originalid='pUSB' draggable='true' ondragstart='drag_linea(event)'>
			USB_.send(<div title='String to send' class='parametroDiv'></div>)
		</div>"
}
*/
EMIC:endif

EMIC:if(.{config.USBprot}.=="STREAM")
/*RFI JSon
{
	'Nombre': 'gUSB',
	'NombreToolBox': 'Read',
	'Tipo' : 'SistemFnc',
	'title': 'Read a string received from USB port',
	'returnInfo': {'type':'string','tooltip':'Value read from USB port'},
	'parameters': [],
	'InnerHTML':"
		<div class='lineaDeCodigo' originalclass='funcion' originalid='gUSB' draggable='true' ondragstart='drag_linea(event)'>
			USB.read()
		</div>"
}
*/
EMIC:endif

EMIC:if(.{config.USBprot}.=="EMIC_message")
/*xRFI JSon
{
	'Nombre': 'eUSB',
	'NombreToolBox': 'Reception',
	'Tipo' : 'SistemEvt',
	'title': 'When it receives a string through the USB port',
	'returnInfo': {'type':'','tooltip':'Nothing'},
	'parameters': [],
	'instancia':'{
		"NombreWorkBox":"Event.USB.Reception",
		"definir":"event_eUSB_active",
		"parametros": [{"type":"char*","value":"TAG","title":"Tag to identify the message"},{"type":"const-streamIn_t*-const","value":"Message","title":"message payload"}]
		}'
}
*/

/**
* @fn extern void eUSB(char* tag,const streamIn_t* const msg);
* @alias Reception
* @brief When it receives a string through the USB port
* @return Nothing
* @param tag Tag to identify the message
* @param msg message payload
*/

EMIC:endif

EMIC:if(.{config.USBprot}.=="TEXT_line")
/*RFI JSon
{
	'Nombre': 'eUSB',
	'NombreToolBox': 'Reception',
	'Tipo' : 'SistemEvt',
	'title': 'When it receives a string from USB port',
	'returnInfo': {'type':'','tooltip':'Nothing'},
	'parameters': [],
	'instancia':'{
		"NombreWorkBox":"Event.USB.Reception",
		"definir":"event_eUSB_active",
		"parametros": [{"value":"Message","title":"message payload"}]
		}'
}
*/
EMIC:endif

/*RFI JSon
{
	'Nombre': 'eBeUSB',
	'NombreToolBox': 'endSend',
	'Tipo' : 'SistemEvt',
	'title': 'When finish send data by USB port',
	'returnInfo': {'type':'','tooltip':'Nothing'},
	'parameters': [],
	'instancia':'{
		"NombreWorkBox": "Event.USB.endSend",
		"definir":"event_eBeUSB_active",
		"parametros": []
		}'
}
*/

// TODO: Cambiar por -> (_driver/USB/usb.emic,driver=MCP2200) y de ahi llamar al uart
//#newRFIcode(_hard\Uart\uart.emic,puerto=.{puerto}.,baud=.{baud}.,bufferIn=.{bufferIn}.,bufferOut=.{bufferOut}.,frameLf={USBFrameLf})
//#newRFIcode(_hard\Uart\uart.emic,puerto=.{puerto}.,baud=.{baud}.,bufferIn=.{bufferIn}.,bufferOut=.{bufferOut}.,frameLf=0x0A)

EMIC:setInput(DEV:_drivers/USB/.{driver}./.{driver}..v1.1.0.emic,puerto=.{puerto}.,baud=.{baud}.,bufferIn=.{bufferIn}.,bufferOut=.{bufferOut}.,frameLf=0x0A)


	EMIC:copy(inc/USB_API.v1.1.0.h > TARGET:inc/USB_API.v1.1.0.h, puerto=.{puerto}.,nombre=,baud=.{baud}.,bufferIn=.{bufferIn}.,bufferOut=.{bufferOut}.)
	EMIC:define(includes_codigo.USB_API.v1.1.0,USB_API.v1.1.0)

	EMIC:copy(src/USB_API.v1.1.0.c > TARGET:src/USB_API.v1.1.0.c, puerto=.{puerto}.,baud=.{baud}.,bufferIn=.{bufferIn}.,bufferOut=.{bufferOut}.)
	EMIC:define(includes_src.USB_API.v1.1.0,USB_API.v1.1.0)

/*==================[end of file]============================================*/
EMIC:endif
